# ============================================================================
# AI TTS Pro - Environment Configuration Template
# ============================================================================
# Copy this file to .env and fill in your actual values
# DO NOT commit .env file to version control for security

# ============================================================================
# GOOGLE GEMINI AI CONFIGURATION (Required)
# ============================================================================
# Get your API key from: https://ai.google.dev/
GEMINI_API_KEY=your_google_gemini_api_key_here

# Optional: Gemini API endpoint (usually not needed to change)
# GEMINI_API_ENDPOINT=https://generativelanguage.googleapis.com

# ============================================================================
# APPLICATION CONFIGURATION
# ============================================================================
# Flask application settings
FLASK_APP=app.py
FLASK_ENV=production
FLASK_DEBUG=false

# Server configuration
HOST=0.0.0.0
PORT=5001

# Secret key for session management (generate a random string)
SECRET_KEY=your_super_secret_key_here_change_this_in_production

# ============================================================================
# TTS ENGINE CONFIGURATION
# ============================================================================
# Default TTS engine (gemini or edge)
DEFAULT_TTS_ENGINE=gemini

# Default voice for Gemini
DEFAULT_GEMINI_VOICE=Zephyr

# Default voice for Edge TTS
DEFAULT_EDGE_VOICE=en-US-AriaNeural

# Maximum text length (characters)
MAX_TEXT_LENGTH=5000

# Maximum batch size for batch processing
MAX_BATCH_SIZE=10

# ============================================================================
# AUDIO PROCESSING CONFIGURATION
# ============================================================================
# Default audio format
DEFAULT_AUDIO_FORMAT=wav

# Audio quality settings
DEFAULT_AUDIO_QUALITY=high

# Enable audio enhancement by default
DEFAULT_AUDIO_ENHANCEMENT=false

# Audio processing timeout (seconds)
AUDIO_PROCESSING_TIMEOUT=60

# ============================================================================
# FILE STORAGE CONFIGURATION
# ============================================================================
# Upload directory
UPLOAD_FOLDER=uploads

# Output directory
OUTPUT_FOLDER=outputs

# Maximum file size (bytes) - 16MB default
MAX_FILE_SIZE=16777216

# File cleanup interval (hours)
FILE_CLEANUP_INTERVAL=24

# ============================================================================
# RATE LIMITING CONFIGURATION
# ============================================================================
# Enable rate limiting
ENABLE_RATE_LIMITING=true

# Requests per minute per IP
RATE_LIMIT_PER_MINUTE=30

# Requests per hour per IP
RATE_LIMIT_PER_HOUR=500

# Rate limit storage (memory or redis)
RATE_LIMIT_STORAGE=memory

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================
# Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Log file path
LOG_FILE=tts_app.log

# Maximum log file size (MB)
MAX_LOG_SIZE=50

# Number of backup log files to keep
LOG_BACKUP_COUNT=3

# Enable JSON logging for production
JSON_LOGGING=false

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================
# Enable CORS
ENABLE_CORS=true

# Allowed origins for CORS (comma-separated)
CORS_ORIGINS=*

# Enable security headers
ENABLE_SECURITY_HEADERS=true

# Content Security Policy
CSP_POLICY=default-src 'self'; script-src 'self' 'unsafe-inline' cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' cdnjs.cloudflare.com; font-src 'self' cdnjs.cloudflare.com;

# ============================================================================
# PERFORMANCE CONFIGURATION
# ============================================================================
# Enable caching
ENABLE_CACHING=true

# Cache timeout (seconds)
CACHE_TIMEOUT=3600

# Maximum concurrent requests
MAX_CONCURRENT_REQUESTS=10

# Request timeout (seconds)
REQUEST_TIMEOUT=30

# ============================================================================
# MONITORING & HEALTH CHECKS
# ============================================================================
# Enable health check endpoint
ENABLE_HEALTH_CHECK=true

# Health check interval (seconds)
HEALTH_CHECK_INTERVAL=60

# Enable metrics collection
ENABLE_METRICS=true

# Metrics endpoint path
METRICS_ENDPOINT=/metrics

# ============================================================================
# DATABASE CONFIGURATION (Optional - for future features)
# ============================================================================
# Database URL (for storing user preferences, analytics, etc.)
# DATABASE_URL=sqlite:///tts_app.db

# Enable database
# ENABLE_DATABASE=false

# ============================================================================
# REDIS CONFIGURATION (Optional - for caching and rate limiting)
# ============================================================================
# Redis URL for caching and session storage
# REDIS_URL=redis://localhost:6379/0

# Enable Redis
# ENABLE_REDIS=false

# ============================================================================
# EMAIL CONFIGURATION (Optional - for notifications)
# ============================================================================
# SMTP settings for email notifications
# SMTP_SERVER=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USERNAME=your_email@gmail.com
# SMTP_PASSWORD=your_app_password
# SMTP_USE_TLS=true

# ============================================================================
# THIRD-PARTY INTEGRATIONS (Optional)
# ============================================================================
# OpenAI API key (for future integrations)
# OPENAI_API_KEY=your_openai_api_key_here

# Azure Cognitive Services (for additional TTS options)
# AZURE_SPEECH_KEY=your_azure_speech_key
# AZURE_SPEECH_REGION=your_azure_region

# AWS Polly (for additional TTS options)
# AWS_ACCESS_KEY_ID=your_aws_access_key
# AWS_SECRET_ACCESS_KEY=your_aws_secret_key
# AWS_REGION=us-east-1

# ============================================================================
# DEVELOPMENT CONFIGURATION
# ============================================================================
# Enable development features
DEVELOPMENT_MODE=false

# Enable debug toolbar
ENABLE_DEBUG_TOOLBAR=false

# Hot reload for development
ENABLE_HOT_RELOAD=false

# ============================================================================
# DEPLOYMENT SPECIFIC
# ============================================================================
# Environment name (development, staging, production)
ENVIRONMENT=production

# Application version
APP_VERSION=2.0.0

# Build number (set by CI/CD)
BUILD_NUMBER=latest

# Deployment platform (render, heroku, aws, gcp, azure, local)
DEPLOYMENT_PLATFORM=render

# ============================================================================
# RENDER.COM SPECIFIC CONFIGURATION
# ============================================================================
# These are automatically set by Render.com, but you can override them
# PORT is automatically set by Render
# RENDER=true is automatically set by Render

# Custom domain (if using custom domain on Render)
# CUSTOM_DOMAIN=your-domain.com

# ============================================================================
# ANALYTICS & TRACKING (Optional)
# ============================================================================
# Google Analytics tracking ID
# GA_TRACKING_ID=UA-XXXXXXXXX-X

# Enable usage analytics
# ENABLE_ANALYTICS=false

# ============================================================================
# BACKUP CONFIGURATION (Optional)
# ============================================================================
# Enable automatic backups
# ENABLE_BACKUPS=false

# Backup interval (hours)
# BACKUP_INTERVAL=24

# Backup retention (days)
# BACKUP_RETENTION=7

# ============================================================================
# SCALING CONFIGURATION
# ============================================================================
# Number of worker processes
WORKERS=3

# Worker class (sync, async, gevent, eventlet)
WORKER_CLASS=sync

# Worker connections (for async workers)
WORKER_CONNECTIONS=1000

# Worker timeout (seconds)
WORKER_TIMEOUT=120

# ============================================================================
# EXAMPLE VALUES FOR QUICK SETUP
# ============================================================================
# For quick testing, you can use these example values:
# GEMINI_API_KEY=AIzaSyD4K3QvQHK4E3QvQHK4E3QvQHK4E3QvQHK4
# SECRET_KEY=your-super-secret-key-here-change-in-production
# DEFAULT_TTS_ENGINE=gemini
# DEFAULT_GEMINI_VOICE=Zephyr
# LOG_LEVEL=INFO
# ENABLE_RATE_LIMITING=true

# ============================================================================
# SECURITY NOTES
# ============================================================================
# 1. Never commit this file with real API keys to version control
# 2. Use strong, random secret keys in production
# 3. Regularly rotate API keys and passwords
# 4. Use environment-specific configurations
# 5. Enable security headers and HTTPS in production
# 6. Monitor and log security events
# 7. Regularly update dependencies for security patches

# ============================================================================
# GETTING API KEYS
# ============================================================================
# Google Gemini API:
# 1. Go to https://ai.google.dev/
# 2. Sign up for Google AI Studio
# 3. Create a new project
# 4. Generate an API key
# 5. Copy the key and paste it above

# ============================================================================
# PRODUCTION CHECKLIST
# ============================================================================
# Before deploying to production:
# ✓ Set FLASK_ENV=production
# ✓ Set FLASK_DEBUG=false
# ✓ Use a strong SECRET_KEY
# ✓ Set proper LOG_LEVEL
# ✓ Enable ENABLE_SECURITY_HEADERS
# ✓ Configure proper CORS_ORIGINS
# ✓ Set up monitoring and health checks
# ✓ Configure backup strategy
# ✓ Set up SSL/HTTPS
# ✓ Configure rate limiting
# ✓ Test all TTS engines
# ✓ Verify file permissions
# ✓ Set up log rotation
